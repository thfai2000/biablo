{"version":3,"file":"dungeon-generator.js","mappings":"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","sources":["webpack://diablo-rpg/./src/client/dungeon-generator.ts"],"sourcesContent":["import { GameConfig } from '../types/game-config';\n\ninterface Room {\n  x: number;\n  y: number;\n  w: number;\n  h: number;\n  centerX: number;\n  centerY: number;\n}\n\ninterface Position {\n  x: number;\n  y: number;\n}\n\ninterface DungeonResult {\n  map: number[][];\n  upStairsPos: Position | null;\n  downStairsPos: Position | null;\n}\n\nexport class DungeonGenerator {\n  private config: GameConfig;\n  private level: number;\n  private width: number;\n  private height: number;\n  private minRooms: number;\n  private maxRooms: number;\n  private roomMinSize: number;\n  private roomMaxSize: number;\n  private map: number[][];\n  private rooms: Room[];\n  private upStairsPos: Position | null;\n  private downStairsPos: Position | null;\n  \n  constructor(config: GameConfig, level: number) {\n    this.config = config;\n    this.level = level;\n    this.width = config.map.viewportWidth * 3; // Map larger than viewport\n    this.height = config.map.viewportHeight * 3;\n    this.minRooms = config.map.minRoomsPerFloor;\n    this.maxRooms = config.map.maxRoomsPerFloor;\n    this.roomMinSize = config.map.roomMinSize;\n    this.roomMaxSize = config.map.roomMaxSize;\n    \n    // Tile types: 0=wall, 1=floor, 2=up stairs, 3=down stairs\n    this.map = Array(this.height).fill(0).map(() => Array(this.width).fill(0));\n    this.rooms = [];\n    this.upStairsPos = null;\n    this.downStairsPos = null;\n  }\n  \n  generate(): DungeonResult {\n    // Reset the map\n    this.map = Array(this.height).fill(0).map(() => Array(this.width).fill(0));\n    this.rooms = [];\n    \n    // Generate rooms\n    const numRooms = this.randomInt(this.minRooms, this.maxRooms);\n    \n    for (let i = 0; i < numRooms; i++) {\n      // Random room size\n      const w = this.randomInt(this.roomMinSize, this.roomMaxSize);\n      const h = this.randomInt(this.roomMinSize, this.roomMaxSize);\n      \n      // Random room position\n      const x = this.randomInt(1, this.width - w - 1);\n      const y = this.randomInt(1, this.height - h - 1);\n      \n      const newRoom: Room = {\n        x, y, w, h,\n        centerX: Math.floor(x + w / 2),\n        centerY: Math.floor(y + h / 2)\n      };\n      \n      // Check if this room intersects with any existing room\n      let intersects = false;\n      for (const room of this.rooms) {\n        if (this._roomsIntersect(newRoom, room)) {\n          intersects = true;\n          break;\n        }\n      }\n      \n      if (!intersects) {\n        // Room doesn't intersect, so carve it out\n        this._createRoom(newRoom);\n        \n        // Connect to previous room except for the first one\n        if (this.rooms.length > 0) {\n          const prevRoom = this.rooms[this.rooms.length - 1];\n          this._createCorridor(prevRoom, newRoom);\n        }\n        \n        this.rooms.push(newRoom);\n      }\n    }\n    \n    // Ensure all rooms are connected\n    for (let i = 0; i < this.rooms.length - 1; i++) {\n      this._createCorridor(this.rooms[i], this.rooms[i + 1]);\n    }\n    \n    // Add stairs - up stairs in first room, down stairs in last room\n    if (this.level > 0) { // No up stairs in village\n      this.upStairsPos = {\n        x: this.rooms[0].centerX,\n        y: this.rooms[0].centerY\n      };\n      this.map[this.upStairsPos.y][this.upStairsPos.x] = 2; // Up stairs\n    }\n    \n    if (this.level < this.config.world.totalDungeonFloors) { // No down stairs on last level\n      this.downStairsPos = {\n        x: this.rooms[this.rooms.length - 1].centerX,\n        y: this.rooms[this.rooms.length - 1].centerY\n      };\n      this.map[this.downStairsPos.y][this.downStairsPos.x] = 3; // Down stairs\n    }\n    \n    return {\n      map: this.map,\n      upStairsPos: this.upStairsPos,\n      downStairsPos: this.downStairsPos\n    };\n  }\n  \n  private _createRoom(room: Room): void {\n    for (let y = room.y; y < room.y + room.h; y++) {\n      for (let x = room.x; x < room.x + room.w; x++) {\n        this.map[y][x] = 1; // Floor\n      }\n    }\n  }\n  \n  private _createCorridor(roomA: Room, roomB: Room): void {\n    // Create an L-shaped corridor between two rooms\n    const startX = roomA.centerX;\n    const startY = roomA.centerY;\n    const endX = roomB.centerX;\n    const endY = roomB.centerY;\n    \n    // First go horizontally then vertically\n    this._drawHorizontalCorridor(startX, endX, startY);\n    this._drawVerticalCorridor(startY, endY, endX);\n  }\n  \n  private _drawHorizontalCorridor(startX: number, endX: number, y: number): void {\n    const start = Math.min(startX, endX);\n    const end = Math.max(startX, endX);\n    \n    for (let x = start; x <= end; x++) {\n      this.map[y][x] = 1; // Floor\n      // Add width to corridor\n      for (let i = 1; i <= this.config.map.corridorWidth / 2; i++) {\n        if (y - i >= 0) this.map[y - i][x] = 1;\n        if (y + i < this.height) this.map[y + i][x] = 1;\n      }\n    }\n  }\n  \n  private _drawVerticalCorridor(startY: number, endY: number, x: number): void {\n    const start = Math.min(startY, endY);\n    const end = Math.max(startY, endY);\n    \n    for (let y = start; y <= end; y++) {\n      this.map[y][x] = 1; // Floor\n      // Add width to corridor\n      for (let i = 1; i <= this.config.map.corridorWidth / 2; i++) {\n        if (x - i >= 0) this.map[y][x - i] = 1;\n        if (x + i < this.width) this.map[y][x + i] = 1;\n      }\n    }\n  }\n  \n  private _roomsIntersect(a: Room, b: Room): boolean {\n    // Check if two rooms intersect, including a buffer\n    const buffer = 2; // Minimum space between rooms\n    return (\n      a.x - buffer < b.x + b.w + buffer &&\n      a.x + a.w + buffer > b.x - buffer &&\n      a.y - buffer < b.y + b.h + buffer &&\n      a.y + a.h + buffer > b.y - buffer\n    );\n  }\n  \n  // Special generator for the village (level 0)\n  generateVillage(): DungeonResult {\n    // Create a more open space for the village\n    for (let y = 5; y < this.height - 5; y++) {\n      for (let x = 5; x < this.width - 5; x++) {\n        // Create a circular village\n        const centerX = this.width / 2;\n        const centerY = this.height / 2;\n        const distance = Math.sqrt((x - centerX) ** 2 + (y - centerY) ** 2);\n        \n        if (distance < this.width / 3) {\n          this.map[y][x] = 1; // Floor\n        }\n      }\n    }\n    \n    // Add the dungeon entrance (cave) near the edge\n    const caveX = Math.floor(this.width / 2);\n    const caveY = Math.floor(this.height * 0.8);\n    \n    for (let y = caveY - 2; y <= caveY + 2; y++) {\n      for (let x = caveX - 3; x <= caveX + 3; x++) {\n        if (y >= 0 && y < this.height && x >= 0 && x < this.width) {\n          this.map[y][x] = 1; // Floor\n        }\n      }\n    }\n    \n    // Add the down stairs (dungeon entrance)\n    this.downStairsPos = { x: caveX, y: caveY };\n    this.map[caveY][caveX] = 3; // Down stairs\n    \n    return {\n      map: this.map,\n      upStairsPos: null,\n      downStairsPos: this.downStairsPos\n    };\n  }\n\n  // Helper methods\n  private randomInt(min: number, max: number): number {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  }\n}"],"names":[],"sourceRoot":""}