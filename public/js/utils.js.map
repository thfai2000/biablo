{"version":3,"file":"utils.js","mappings":";;;;;;;;;;;AAKA,0CAWC;AAKD,wCAmBC;AAKD,8BAEC;AA7CD;;GAEG;AACI,KAAK,UAAU,eAAe;IACnC,IAAI,CAAC;QACH,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,aAAa,CAAC,CAAC;QAC5C,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE,CAAC;YACjB,MAAM,IAAI,KAAK,CAAC,uBAAuB,QAAQ,CAAC,MAAM,EAAE,CAAC,CAAC;QAC5D,CAAC;QACD,OAAO,MAAM,QAAQ,CAAC,IAAI,EAAgB,CAAC;IAC7C,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,OAAO,CAAC,KAAK,CAAC,6BAA6B,EAAE,KAAK,CAAC,CAAC;QACpD,OAAO,IAAI,CAAC;IACd,CAAC;AACH,CAAC;AAED;;GAEG;AACH,SAAgB,cAAc,CAAC,OAAe,EAAE,OAAe,MAAM;IACnE,MAAM,UAAU,GAAG,QAAQ,CAAC,cAAc,CAAC,aAAa,CAAC,CAAC;IAC1D,IAAI,UAAU,EAAE,CAAC;QACf,MAAM,cAAc,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QACrD,cAAc,CAAC,SAAS,CAAC,GAAG,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;QAC9C,cAAc,CAAC,WAAW,GAAG,OAAO,CAAC;QAErC,UAAU,CAAC,WAAW,CAAC,cAAc,CAAC,CAAC;QAEvC,uBAAuB;QACvB,UAAU,CAAC,SAAS,GAAG,UAAU,CAAC,YAAY,CAAC;QAE/C,+BAA+B;QAC/B,OAAO,UAAU,CAAC,iBAAiB,GAAG,EAAE,EAAE,CAAC;YACzC,UAAU,CAAC,WAAW,CAAC,UAAU,CAAC,UAAkB,CAAC,CAAC;QACxD,CAAC;IACH,CAAC;SAAM,CAAC;QACN,OAAO,CAAC,GAAG,CAAC,IAAI,IAAI,KAAK,OAAO,EAAE,CAAC,CAAC;IACtC,CAAC;AACH,CAAC;AAED;;GAEG;AACH,SAAgB,SAAS,CAAC,GAAW,EAAE,GAAW;IAChD,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;AAC3D,CAAC","sources":["webpack://diablo-rpg/./src/client/utils.ts"],"sourcesContent":["import { GameConfig } from '../types/game-config';\n\n/**\n * Fetches the game configuration from the server\n */\nexport async function fetchGameConfig(): Promise<GameConfig | null> {\n  try {\n    const response = await fetch('/api/config');\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return await response.json() as GameConfig;\n  } catch (error) {\n    console.error('Error fetching game config:', error);\n    return null;\n  }\n}\n\n/**\n * Display a message in the message log\n */\nexport function displayMessage(message: string, type: string = 'info'): void {\n  const messageLog = document.getElementById('message-log');\n  if (messageLog) {\n    const messageElement = document.createElement('div');\n    messageElement.classList.add('message', type);\n    messageElement.textContent = message;\n    \n    messageLog.appendChild(messageElement);\n    \n    // Scroll to the bottom\n    messageLog.scrollTop = messageLog.scrollHeight;\n    \n    // Limit the number of messages\n    while (messageLog.childElementCount > 50) {\n      messageLog.removeChild(messageLog.firstChild as Node);\n    }\n  } else {\n    console.log(`[${type}] ${message}`);\n  }\n}\n\n/**\n * Generate a random integer between min and max (inclusive)\n */\nexport function randomInt(min: number, max: number): number {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}"],"names":[],"sourceRoot":""}